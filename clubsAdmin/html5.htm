<!DOCTYPE html>
<html>
<head>
<title>Upload in Progress...</title>
<style>
/* Styles */
@-webkit-keyframes progress-bar-stripes {
  from  { background-position: 40px 0; }
  to    { background-position: 0 0; }
}

@-moz-keyframes progress-bar-stripes {
  from  { background-position: 40px 0; }
  to    { background-position: 0 0; }
}

@-ms-keyframes progress-bar-stripes {
  from  { background-position: 40px 0; }
  to    { background-position: 0 0; }
}

@-o-keyframes progress-bar-stripes {
  from  { background-position: 0 0; }
  to    { background-position: 40px 0; }
}

@keyframes progress-bar-stripes {
  from  { background-position: 40px 0; }
  to    { background-position: 0 0; }
}

body {
	margin: 0;
	padding: 0;
}

#bg {
	overflow: hidden;
	width: 330px;
	height: 140px;
	padding: 5px 10px;
	background: #ddd;
	/*background-image: -webkit-linear-gradient(top, #666, #333);
	background-image: linear-gradient(to bottom, #666, #333);*/
	background-image: -webkit-linear-gradient(top, rgba(255,255,255,.1) 50%, rgba(0,0,0,.1) 51%);
	background-image: -moz-linear-gradient(top, rgba(255,255,255,.1) 50%, rgba(0,0,0,.1) 51%);
	background-image: -o-linear-gradient(top, rgba(255,255,255,.1) 50%, rgba(0,0,0,.1) 51%);
	background-image: linear-gradient(to bottom, rgba(255,255,255,.1) 50%, rgba(0,0,0,.1) 51%);
}

#progress {
	width: 100%;
	height: 20px;
	overflow: hidden;
	background: #ccc;
	background-image: -webkit-linear-gradient(top, rgba(255,255,255,.3), rgba(0,0,0,.3));
	background-image: -moz-linear-gradient(top, rgba(255,255,255,.3), rgba(0,0,0,.3));
	background-image: -o-linear-gradient(top, rgba(255,255,255,.3), rgba(0,0,0,.3));
	background-image: linear-gradient(to bottom, rgba(255,255,255,.3), rgba(0,0,0,.3));
	border-radius: 4px;
	box-shadow: inset 0 1px 1px rgba(0,0,0,.15), inset 0 -1px 1px rgba(255,255,255,.15);
}

#bar {
	float: left;
	left: 0;
	top: 0;
	width: 0%;
	height: 100%;
	background: #16e;
	background-image: -webkit-linear-gradient(top, rgba(255,255,255,.3), rgba(0,0,0,.3));
	background-image: -moz-linear-gradient(top, rgba(255,255,255,.3), rgba(0,0,0,.3));
	background-image: -o-linear-gradient(top, rgba(255,255,255,.3), rgba(0,0,0,.3));
	background-image: linear-gradient(to bottom, rgba(255,255,255,.3), rgba(0,0,0,.3));
	box-shadow: inset 0 -1px 0 rgba(0,0,0,.15);
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
	-webkit-transition: width .6s ease;
	-moz-transition: width .6s ease;
	-o-transition: width .6s ease;
	transition: width .6s ease;
}

#bar.striped {
	-webkit-background-size: 40px 40px;
	-moz-background-size: 40px 40px;
	-o-background-size: 40px 40px;
	background-size: 40px 40px;
	background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(.25, rgba(255,255,255,.15)), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, rgba(255,255,255,.15)), color-stop(.75, rgba(255,255,255,.15)), color-stop(.75, transparent), to(transparent));
	background-image: -webkit-linear-gradient(45deg, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent), -webkit-linear-gradient(top, rgba(255,255,255,.5), rgba(0,0,0,.8));
	background-image: -moz-linear-gradient(45deg, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent), -moz-linear-gradient(top, rgba(255,255,255,.5), rgba(0,0,0,.8));
	background-image: -o-linear-gradient(45deg, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent), -o-linear-gradient(top, rgba(255,255,255,.5), rgba(0,0,0,.8));
	background-image: linear-gradient(45deg, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent), linear-gradient(top, rgba(255,255,255,.5), rgba(0,0,0,.8));

	-webkit-animation: progress-bar-stripes 2s linear infinite;
	-moz-animation: progress-bar-stripes 2s linear infinite;
	-ms-animation: progress-bar-stripes 2s linear infinite;
	-o-animation: progress-bar-stripes 2s linear infinite;
	animation: progress-bar-stripes 2s linear infinite;
}

.status {
	overflow: hidden;
	background: #eee;
	height: 38px;
	margin: 5px 0;
	padding: 5px;
	text-align: left;
	font-family: arial, sans-serif;
	font-size: 14px;
	line-height: 20px;
	color: #666;
	border: 1px solid rgba(0,0,0,.3);
	border-radius: 4px;
	box-shadow: inset 0 1px 2px rgba(0,0,0,.15);
}
</style>
</head>
<body>
<div id="bg">
	<div id="status1" class="status">Initializing</div>
	<div id="progress">
		<div id="bar" class="striped"></div>
	</div>
	<div id="status2" class="status"></div>
</div>
<script>
// =========== Template Parameters ===========
var ProgressColor    = "#1166EE",
	ProgressBgColor  = "#CCCCCC",
	BackgroundColor  = "#DDDDDD",
	DisplayColor     = "#EEEEEE",
	DisplayTextColor = "#666666",
	TopText          = "Remaining%20time:%20#remaining%0ASpeed:%20#speed",
	BottomText       = "#status%20#file%0AStatus:%20#uploaded%20/%20#total%20(#percent%25)",
	InitText         = "Initializing",
	UploadingText    = "Uploading",
	WritingText      = "Writing",
	CompletedText    = "Done",
	TimeVarsText     = "second,seconds,minute,minutes,hour,hours";
// ===========================================

var start = (new Date()),
	url   = getParameterByName('progressurl'),
	id    = getParameterByName('uploadid'),
	demo  = (url == '' || id == '');

if (demo && !parent.PU3_uploaded) { // real demo not ajax
	ProgressColor    = getParameterByName('ProgressColor')    || '0x1166EE';
	ProgressBgColor  = getParameterByName('ProgressBgColor')  || '0xCCCCCC';
	BackgroundColor  = getParameterByName('BackgroundColor')  || '0xDDDDDD';
	DisplayColor     = getParameterByName('DisplayColor')     || '0xEEEEEE';
	DisplayTextColor = getParameterByName('DisplayTextColor') || '0x666666';
	TopText          = getParameterByName('TopText')          || 'Remaining time: #remaining\nSpeed: #speed';
	BottomText       = getParameterByName('BottomText')       || '#status #file\nStatus: #uploaded / #total (#percent%)';
	InitText         = getParameterByName('InitText')         || 'Initializing';
	UploadingText    = getParameterByName('UploadingText')    || 'Uploading';
	WritingText      = getParameterByName('WritingText')      || 'Writing';
	CompletedText    = getParameterByName('CompletedText')    || 'Done';
	TimeVarsText     = getParameterByName('TimeVarsText')     || 'second,seconds,minute,minutes,hour,hours';
}

document.getElementById('progress').style.backgroundColor = ProgressBgColor.replace('0x', '#');
document.getElementById('bar').style.backgroundColor = ProgressColor.replace('0x', '#');
document.getElementById('bg').style.backgroundColor = BackgroundColor.replace('0x', '#');
document.getElementById('status1').style.backgroundColor = DisplayColor.replace('0x', '#');
document.getElementById('status1').style.color = DisplayTextColor.replace('0x', '#');
document.getElementById('status2').style.backgroundColor = DisplayColor.replace('0x', '#');
document.getElementById('status2').style.color = DisplayTextColor.replace('0x', '#');

var progressData = {
	totalBytes    : demo ? 1500000 : 0,
	uploadedBytes : 0,
	statusCode    : demo ? 1 : 0,
	lastFile      : demo ? 'demo.bin' : '',
	lastError     : '',

	total : function() {
		return formatSize(this.totalBytes);
	},

	uploaded : function() {
		return formatSize(this.uploadedBytes);
	},

	status : function() {
		return formatStatus(this.statusCode);
	},

	file : function() {
		if (this.statusCode == 1 || this.statusCode == 2) return this.lastFile;
		return '';
	},

	percent : function() {
		return this.totalBytes > 0 ? Math.round((this.uploadedBytes / this.totalBytes) * 100) : 0;
	},

	remaining : function() {
		var p = this.percent();
		if (this.uploadedBytes > 1 && p > 1) {
			var t = ((new Date()) - start) / 1000;
			return formatTime(Math.round(((t / p) * 100) - t));
		}
		return '';
	},

	speed : function() {
		var p = this.percent();
		if (this.uploadedBytes > 1 && p > 1) {
			var t = ((new Date()) - start) / 1000;
			return formatSize(this.uploadedBytes / t) + '/s';
		}
		return '';
	}
}

var req = createXMLHttpObject();

progress();

function progress() {
	if (!req) return;

	if (demo) {
		update();
	} else {
		req.open("GET", url + "?UploadId=" + id, true);
		req.onreadystatechange = function() {
			if (req.readyState != 4) return;
			if (req.status != 200 && req.status != 304) {
				//alert('HTTP error ' + req.status);
				return;
			}
			update(req.responseXML);
		};
		if (req.readyState == 4) return;
		req.send();
	}
}

function update(xml) {
	if (demo) {
		if (parent.PU3_uploaded) {
			progressData.lastFile = "";
			progressData.uploadedBytes = parent.PU3_uploaded;
			progressData.totalBytes = parent.PU3_total;
		} else {
			progressData.uploadedBytes += Math.round(Math.random()*50000);
			if (progressData.uploadedBytes > progressData.totalBytes) {
				progressData.uploadedBytes = 0;
				start = (new Date());
			}
		}
	} else if (xml) {
		var root = xml.documentElement;
		progressData.totalBytes    = parseInt(root.getAttribute('totalBytes'), 10) || 0;
		progressData.uploadedBytes = parseInt(root.getAttribute('uploadedBytes'), 10) || 0;
		progressData.statusCode    = parseInt(root.getAttribute('status'), 10) || 0;
		progressData.lastFile      = String(root.getAttribute('lastFile'));
		progressData.lastError     = String(root.getAttribute('lastError'));
	}

	document.getElementById('bar').style.width = progressData.percent() + '%';
	document.getElementById('status1').innerHTML = progressData.lastError || formatText(TopText);
	document.getElementById('status2').innerHTML = formatText(BottomText);

	setTimeout(progress, 500);
}

function formatStatus(n) {
	return ([InitText, UploadingText, WritingText, CompletedText])[n];
}

function formatText(str) {
	str = unescape(str);

	for (key in progressData) {
		if (typeof progressData[key] == 'function') {
			str = str.replace('#' + key, progressData[key]());
		} else {
			str = str.replace('#' + key, progressData[key]);
		}
	}

	return str.replace(/\n/, '<br>');
}

function formatTime(s) {
	if (s == 0) return '';

	var timeVars = unescape(TimeVarsText).split(',');

	if (s < 60) {
		return s + ' ' + (s == 1 ? timeVars[0] : timeVars[1]);
	}

	var m = Math.floor(s / 60);
	s -= m * 60;

	if (s < 3600) {
		return m + ' ' + (m == 1 ? timeVars[2] : timeVars[3]) +
			', ' + s + ' ' + (s == 1 ? timeVars[0] : timeVars[1]);
	}

	var h = Math.floor(m / 60);
	m -= h * 60;

	return h + ' ' + (h == 1 ? timeVars[4] : timeVars[5]) +
		', ' + m + ' ' + (m == 1 ? timeVars[2] : timeVars[3]) +
		', ' + s + ' ' + (s == 1 ? timeVars[0] : timeVars[1]);
}

function formatSize(size) {
	if (size < 1000)
		return Math.round(size) + ' B';
	if (size < 1000000)
		return formatNumber(size / 1000, 2) + ' kB';
	if (size < 1000000000)
		return formatNumber(size / 1000000, 2) + ' MB';
	return formatNumber(size / 1000000000, 2) + ' GB';
}

function formatNumber(n, d) {
	var s = String(Math.round(n * Math.pow(10, d)) / Math.pow(10, d)),
		p = s.indexOf('.');

	if (p != -1) {
		while (s.substr(p+1).length < d) {
			s += '0';
		}
	} else {
		s += '.';
		for (var i = 0; i < d; i++) s += '0';
	}

	return s;
}

function getParameterByName(name) {
	name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
	var regexS = "[\\?&]" + name + "=([^&#]*)";
	var regex = new RegExp(regexS, "i");
	var results = regex.exec(window.location.search);
	if(results == null) {
		return "";
	} else {
		return decodeURIComponent(results[1].replace(/\+/g, " "));
	}
}

function createXMLHttpObject() {
	var xmlhttp = false,
		XMLHttpFactories = [
			function () {return new XMLHttpRequest()},
			function () {return new ActiveXObject("Msxml2.XMLHTTP.6.0")},
			function () {return new ActiveXObject("Msxml2.XMLHTTP.3.0")},
			function () {return new ActiveXObject("Microsoft.XMLHTTP")}
		];

	for (var i = 0; i < XMLHttpFactories.length; i++) {
		try { xmlhttp = XMLHttpFactories[i](); }
		catch(e) { continue; }
		break;
	}

	return xmlhttp;
}
</script>
</body>
</html>